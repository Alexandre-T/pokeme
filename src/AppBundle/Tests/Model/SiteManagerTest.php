<?php
/**
 * This file is part of the PokeMe Application.
 *
 * PHP version 5
 *
 * (c) Alexandre Tranchant <alexandre.tranchant@gmail.com>
 *
 * @category ModelManager
 *
 * @author    Alexandre Tranchant <alexandre.tranchant@gmail.com>
 * @copyright 2015 Alexandre Tranchant
 * @license   GNU General Public License, version 3
 *
 * @link http://opensource.org/licenses/GPL-3.0
 */
namespace AppBundle\Tests;

use AppBundle\Entity\Site;
use AppBundle\Entity\Validation;
use AppBundle\Model\SiteManager;
use Application\Sonata\UserBundle\Entity\User;

/**
 * Entity Site Class Tests.
 * Skeleton generated by PHPUnit_SkeletonGenerator.
 *
 * @category Testing
 *
 * @author  Alexandre Tranchant <alexandre.tranchant@gmail.com>
 * @license GNU General Public License, version 3
 *
 * @link http://opensource.org/licenses/GPL-3.0
 */
class SiteManagerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Doctrine Entity Manager (Mock).
     *
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    private $entityManager;

    /**
     * Repository Entity (Mock).
     *
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    private $repository;

    /**
     * Site Manager to test.
     *
     * @var SiteManager
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->repository = $this->getMockBuilder('Doctrine\Orm\EntityRepository')
            ->disableOriginalConstructor()
            ->getMock();
        $this->entityManager = $this->getMockBuilder('Doctrine\ORM\EntityManager')
            ->disableOriginalConstructor()
            ->getMock();
        $this->entityManager->expects($this->exactly(1))
            ->method('getRepository')
            ->willReturn($this->repository);
        $this->object = new SiteManager($this->entityManager, 'AppBundle\Entity\Site');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->entityManager = null;
        $this->object = null;
        parent::tearDown();
    }

    /**
     * Test constructor.
     *
     * @covers AppBundle\Model\SiteManager::__construct()
     */
    public function testConstruct()
    {
        $this->assertEquals($this->entityManager, \PHPUnit_Framework_Assert::readAttribute($this->object, 'objectManager'));
        $this->assertEquals($this->repository, \PHPUnit_Framework_Assert::readAttribute($this->object, 'repository'));
    }
    /**
     * Test Creation of an Site.
     *
     * @covers AppBundle\Model\SiteManager::createSite
     */
    public function testCreateSite()
    {
        $expected = new Site();
        $site = $this->object->createSite();
        $this->assertEquals($expected, $site);
    }

    /**
     * Test deletion of an site.
     *
     * @covers AppBundle\Model\SiteManager::deleteSite
     */
    public function testDeleteSite()
    {
        $this->entityManager->expects($this->exactly(1))
            ->method('remove');
        $this->entityManager->expects($this->exactly(1))
            ->method('flush');
        $site = new Site();
        $this->object->deleteSite($site);
    }

    /**
     * Test validation of an site.
     *
     * @covers AppBundle\Model\SiteManager::validateSite
     */
    public function testValidateSite()
    {
        $user = new User();
        $site = $this->object->createSite();
        $expected = new Validation();
        $expected->setValidator($user);
        $expected->setStatus(Validation::ACCEPTE);
        $this->object->validateSite($site, $user);
        $this->assertEquals($expected, $site->getValidation());
        $expected->setReason('foo');
        $this->object->validateSite($site, $user, 'foo');
        $this->assertEquals($expected, $site->getValidation());
    }

    /**
     * Test reject of an site.
     *
     * @covers AppBundle\Model\SiteManager::rejectSite
     */
    public function testRejectSite()
    {
        $user = new User();
        $site = $this->object->createSite();
        $expected = new Validation();
        $expected->setValidator($user);
        $expected->setStatus(Validation::REFUSE);
        $this->object->rejectSite($site, $user);
        $this->assertEquals($expected, $site->getValidation());
        $expected->setReason('foo');
        $this->object->rejectSite($site, $user, 'foo');
        $this->assertEquals($expected, $site->getValidation());
    }

    /**
     * Test stay Waiting of an site.
     *
     * @covers AppBundle\Model\SiteManager::stayWaitingSite
     */
    public function testStayWaitingSite()
    {
        $user = new User();
        $site = $this->object->createSite();
        $expected = new Validation();
        $expected->setValidator($user);
        $expected->setStatus(Validation::EN_ATTENTE);
        $this->object->stayWaitingSite($site, $user);
        $this->assertEquals($expected, $site->getValidation());
        $expected->setReason('foo');
        $this->object->stayWaitingSite($site, $user, 'foo');
        $this->assertEquals($expected, $site->getValidation());
    }

    /**
     * Test reload|reset of an site.
     *
     * @covers AppBundle\Model\SiteManager::reloadSite
     */
    public function testReloadSite()
    {
        $this->entityManager->expects($this->exactly(1))
            ->method('refresh');
        $site = new Site();
        $this->object->reloadSite($site);
    }

    /**
     * Test persistence update of an site.
     *
     * @covers AppBundle\Model\SiteManager::updateSite
     */
    public function testUpdateSite()
    {
        $site = new Site();
        $this->entityManager->expects($this->exactly(6))
            ->method('persist');
        $this->entityManager->expects($this->exactly(2))
            ->method('flush');
        $this->object->updateSite($site, false);
        $this->object->updateSite($site, true);
        $this->object->updateSite($site);
    }
}
